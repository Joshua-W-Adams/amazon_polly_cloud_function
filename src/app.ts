import * as AWS from 'aws-sdk';
import * as fs from 'fs';

/// API credentials for logging onto the AWS API. These should never be commited to git.
/// to be stored wither as environment variables or encrypted then pushed to git.

/// These credentials are generated by creating a new user in the AWS console using the IAM tool.
/// 1. Go to your AWS console and the IAM service
/// 2. Create a new user with programmatic access
/// 3. Grant user Full Access to Amazon Polly service
/// 4. Download user keys
const awsAccessKeyId: string = '<YOUR AWS ACCESS KEY>';
const awsSecretAccessKey: string = '<YOUR AWS SECRET ACCESS KEY>';

/// Select a AWS region that is most convienent for your purposes. 
/// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
const awsRegion: string = 'ap-southeast-1'; // Singapore

// Create connection to Amazon Polly API
const Polly = new AWS.Polly({
    region: awsRegion,
    accessKeyId: awsAccessKeyId,
    secretAccessKey: awsSecretAccessKey,
})

function _getGender(name: string) {
    if (name == 'Matthew') {
        return 'male';
    } else if (name == 'Olivia') {
        return 'female';
    }
    // else return undefined
}

/**
 * SSML = Speech Synthesis Markup Language.
 * SSML is used by amazon polly to convert text to lifelike speech
 * @param ssml 
 */
function textToSpeech(ssml: string, filePath: string, fileName: string) {
    // inputs to generate lifelike speech
    const inputs: AWS.Polly.SynthesizeSpeechInput[] = [
        // male voice
        {
            Text: ssml,
            OutputFormat: "mp3",
            VoiceId: "Matthew",
            LanguageCode: "en-US",
            Engine: 'neural'
        },
        // female voice
        {
            Text: ssml,
            OutputFormat: "mp3",
            VoiceId: "Olivia",
            LanguageCode: "en-AU",
            Engine: 'neural'
        }];

    // generate all speech files
    for (let i = 0; i < inputs.length; i++) {
        // get speech input configuration
        let input = inputs[i];
        let gender = _getGender(input.VoiceId);
        // call Polly to generate audio speech files.
        Polly.synthesizeSpeech(input, (err, data) => {
            if (err) {
                console.log(err)
                return
            }
            if (data.AudioStream instanceof Buffer) {
                // save file
                fs.writeFile(`${filePath}${fileName}_${gender}.mp3`, data.AudioStream, (fsErr) => {
                    if (fsErr) {
                        console.error(fsErr)
                        return
                    }
                })
            }
        })
    }
}

// Test call to TTS function
textToSpeech(`Stand with your mid-foot under the barbell.
Bend over and grab the bar with a shoulder-width grip.
Bend your knees until your shins touch the bar.
Lift your chest up and straighten your lower back.
Take a big breath, hold it, and stand up with the weight.`, `assets/audio/`, `deadlift`);

